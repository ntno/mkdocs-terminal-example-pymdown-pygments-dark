{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mkdocs-terminal with PyMdown and Pygments # This example site uses the Pygments library and PyMdown Extensions to hilight code blocks as they are rendered to HTML during the MkDocs build process. Please review the Pygments docs for more information on supported programming languages and available styles: Pygments Supported Languages Pygments Builtin Styles Set Up # Install Pygments and PyMdown # Install Pygments (minimum version 2.12) and PyMdown Extensions: mkdocs mkdocs-terminal~=4.0 # Python Markdown Extensions pygments>=2.12 pymdown-extensions Enable PyMdown Extensions # Enable the pymdownx extensions according to the PyMdown documentation: PyMdown Highlight PyMdown InlineHilite Note: for the configuration used in this example site, pymdownx.superfences must be enabled. mkdocs.yml excerpt: markdown_extensions : - pymdownx.superfences # required extension - pymdownx.highlight : use_pygments : true # use pygments library pygments_style : github-dark # use 'github-dark' style noclasses : true # update HTML style attr - pymdownx.inlinehilite # style inline code theme : name : terminal palette : dark","title":"Configuration"},{"location":"#set-up","text":"","title":"Set Up"},{"location":"#install-pygments-and-pymdown","text":"Install Pygments (minimum version 2.12) and PyMdown Extensions: mkdocs mkdocs-terminal~=4.0 # Python Markdown Extensions pygments>=2.12 pymdown-extensions","title":"Install Pygments and PyMdown"},{"location":"#enable-pymdown-extensions","text":"Enable the pymdownx extensions according to the PyMdown documentation: PyMdown Highlight PyMdown InlineHilite Note: for the configuration used in this example site, pymdownx.superfences must be enabled. mkdocs.yml excerpt: markdown_extensions : - pymdownx.superfences # required extension - pymdownx.highlight : use_pygments : true # use pygments library pygments_style : github-dark # use 'github-dark' style noclasses : true # update HTML style attr - pymdownx.inlinehilite # style inline code theme : name : terminal palette : dark","title":"Enable PyMdown Extensions"},{"location":"sample-languages/bash-base/","text":"Bash # Block Highlighting # Language highlighting can be enabled with PyMdown and Pygments by adding a supported programming language name directly after the first ``` grouping in a Markdown code block: #!/bin/bash echo \"Today is \" $( date ) echo -e \"\\nenter the path to a directory\" read the_path echo -e \"\\nfiles and folders: \" ls $the_path Block Markdown # ```bash #!/bin/bash echo \"Today is \" $(date) echo -e \"\\nenter the path to a directory\" read the_path echo -e \"\\nfiles and folders: \" ls $the_path ``` Script adapted from Zaira Hira's \"Bash Scripting Tutorial Linux Shell Script and Command Line For Beginners\"","title":"Bash"},{"location":"sample-languages/bash-base/#block-highlighting","text":"Language highlighting can be enabled with PyMdown and Pygments by adding a supported programming language name directly after the first ``` grouping in a Markdown code block: #!/bin/bash echo \"Today is \" $( date ) echo -e \"\\nenter the path to a directory\" read the_path echo -e \"\\nfiles and folders: \" ls $the_path","title":"Block Highlighting"},{"location":"sample-languages/bash-base/#block-markdown","text":"```bash #!/bin/bash echo \"Today is \" $(date) echo -e \"\\nenter the path to a directory\" read the_path echo -e \"\\nfiles and folders: \" ls $the_path ``` Script adapted from Zaira Hira's \"Bash Scripting Tutorial Linux Shell Script and Command Line For Beginners\"","title":"Block Markdown"},{"location":"sample-languages/bash/","text":"Bash # Block Highlighting # Language highlighting can be enabled with PyMdown and Pygments by adding a supported programming language name directly after the first ``` grouping in a Markdown code block: #!/bin/bash echo \"Today is \" $( date ) echo -e \"\\nenter the path to a directory\" read the_path echo -e \"\\nfiles and folders: \" ls $the_path Block Markdown # ```bash #!/bin/bash echo \"Today is \" $(date) echo -e \"\\nenter the path to a directory\" read the_path echo -e \"\\nfiles and folders: \" ls $the_path ``` Script adapted from Zaira Hira's \"Bash Scripting Tutorial Linux Shell Script and Command Line For Beginners\" Inline Hilighting # Inline highlighting can be added by prefixing the code snippet with three colons and the name of the supported programming language : ```:::LANGUAGE some code snippet``` or `:::LANGUAGE some code snippet` Example: The read command can be used to read input from STDIN. Use the array flag -a to store the provided word sequence as an array: read -a my_array <<< \"hello world\" ; echo ${ my_array [0] } . Inline Markdown # The `:::bash read` command can be used to read input from STDIN. Use the array flag `-a` to store the provided word sequence as an array: ```:::bash read -a my_array <<< \"hello world\"; echo ${my_array[0]}```.","title":"Bash"},{"location":"sample-languages/bash/#block-highlighting","text":"Language highlighting can be enabled with PyMdown and Pygments by adding a supported programming language name directly after the first ``` grouping in a Markdown code block: #!/bin/bash echo \"Today is \" $( date ) echo -e \"\\nenter the path to a directory\" read the_path echo -e \"\\nfiles and folders: \" ls $the_path","title":"Block Highlighting"},{"location":"sample-languages/bash/#block-markdown","text":"```bash #!/bin/bash echo \"Today is \" $(date) echo -e \"\\nenter the path to a directory\" read the_path echo -e \"\\nfiles and folders: \" ls $the_path ``` Script adapted from Zaira Hira's \"Bash Scripting Tutorial Linux Shell Script and Command Line For Beginners\"","title":"Block Markdown"},{"location":"sample-languages/bash/#inline-hilighting","text":"Inline highlighting can be added by prefixing the code snippet with three colons and the name of the supported programming language : ```:::LANGUAGE some code snippet``` or `:::LANGUAGE some code snippet` Example: The read command can be used to read input from STDIN. Use the array flag -a to store the provided word sequence as an array: read -a my_array <<< \"hello world\" ; echo ${ my_array [0] } .","title":"Inline Hilighting"},{"location":"sample-languages/bash/#inline-markdown","text":"The `:::bash read` command can be used to read input from STDIN. Use the array flag `-a` to store the provided word sequence as an array: ```:::bash read -a my_array <<< \"hello world\"; echo ${my_array[0]}```.","title":"Inline Markdown"},{"location":"sample-languages/cobol-base/","text":"Cobol # Block Highlighting # Language highlighting can be enabled with PyMdown and Pygments by adding a supported programming language name directly after the first ``` grouping in a Markdown code block: *> setup the identification division IDENTIFICATION DIVISION . *> setup the program id PROGRAM-ID . HELLO . *> setup the procedure division PROCEDURE DIVISION . *> print a string DISPLAY 'HELLO WORLD' . *> end our program STOP RUN . Block Markdown # ```cobol *> setup the identification division IDENTIFICATION DIVISION. *> setup the program id PROGRAM-ID. HELLO. *> setup the procedure division PROCEDURE DIVISION. *> print a string DISPLAY 'HELLO WORLD'. *> end our program STOP RUN. ``` Script adapted from Yvan Scher's \"7 cobol examples with explanations\"","title":"Cobol"},{"location":"sample-languages/cobol-base/#block-highlighting","text":"Language highlighting can be enabled with PyMdown and Pygments by adding a supported programming language name directly after the first ``` grouping in a Markdown code block: *> setup the identification division IDENTIFICATION DIVISION . *> setup the program id PROGRAM-ID . HELLO . *> setup the procedure division PROCEDURE DIVISION . *> print a string DISPLAY 'HELLO WORLD' . *> end our program STOP RUN .","title":"Block Highlighting"},{"location":"sample-languages/cobol-base/#block-markdown","text":"```cobol *> setup the identification division IDENTIFICATION DIVISION. *> setup the program id PROGRAM-ID. HELLO. *> setup the procedure division PROCEDURE DIVISION. *> print a string DISPLAY 'HELLO WORLD'. *> end our program STOP RUN. ``` Script adapted from Yvan Scher's \"7 cobol examples with explanations\"","title":"Block Markdown"},{"location":"sample-languages/cobol/","text":"Cobol # Block Highlighting # Language highlighting can be enabled with PyMdown and Pygments by adding a supported programming language name directly after the first ``` grouping in a Markdown code block: *> setup the identification division IDENTIFICATION DIVISION . *> setup the program id PROGRAM-ID . HELLO . *> setup the procedure division PROCEDURE DIVISION . *> print a string DISPLAY 'HELLO WORLD' . *> end our program STOP RUN . Block Markdown # ```cobol *> setup the identification division IDENTIFICATION DIVISION. *> setup the program id PROGRAM-ID. HELLO. *> setup the procedure division PROCEDURE DIVISION. *> print a string DISPLAY 'HELLO WORLD'. *> end our program STOP RUN. ``` Script adapted from Yvan Scher's \"7 cobol examples with explanations\"","title":"Cobol"},{"location":"sample-languages/cobol/#block-highlighting","text":"Language highlighting can be enabled with PyMdown and Pygments by adding a supported programming language name directly after the first ``` grouping in a Markdown code block: *> setup the identification division IDENTIFICATION DIVISION . *> setup the program id PROGRAM-ID . HELLO . *> setup the procedure division PROCEDURE DIVISION . *> print a string DISPLAY 'HELLO WORLD' . *> end our program STOP RUN .","title":"Block Highlighting"},{"location":"sample-languages/cobol/#block-markdown","text":"```cobol *> setup the identification division IDENTIFICATION DIVISION. *> setup the program id PROGRAM-ID. HELLO. *> setup the procedure division PROCEDURE DIVISION. *> print a string DISPLAY 'HELLO WORLD'. *> end our program STOP RUN. ``` Script adapted from Yvan Scher's \"7 cobol examples with explanations\"","title":"Block Markdown"},{"location":"sample-languages/javascript-base/","text":"Javascript # Block Highlighting # Language highlighting can be enabled with PyMdown and Pygments by adding a supported programming language name directly after the first ``` grouping in a Markdown code block: let score1 = 2 ; let score2 = 5 ; let averageScore = (score1 + score2) / 2.0 console.log(averageScore) Block Markdown # ```javascript let score1 = 2; let score2 = 5; let averageScore = (score1 + score2) / 2.0 console.log(averageScore) ``` Script adapted from Austin Asoluka's \"How to Use Variables and Data Types in JavaScript \u2013 Explained With Code Examples\"","title":"Javascript"},{"location":"sample-languages/javascript-base/#block-highlighting","text":"Language highlighting can be enabled with PyMdown and Pygments by adding a supported programming language name directly after the first ``` grouping in a Markdown code block: let score1 = 2 ; let score2 = 5 ; let averageScore = (score1 + score2) / 2.0 console.log(averageScore)","title":"Block Highlighting"},{"location":"sample-languages/javascript-base/#block-markdown","text":"```javascript let score1 = 2; let score2 = 5; let averageScore = (score1 + score2) / 2.0 console.log(averageScore) ``` Script adapted from Austin Asoluka's \"How to Use Variables and Data Types in JavaScript \u2013 Explained With Code Examples\"","title":"Block Markdown"},{"location":"sample-languages/javascript/","text":"Javascript # Block Highlighting # Language highlighting can be enabled with PyMdown and Pygments by adding a supported programming language name directly after the first ``` grouping in a Markdown code block: let score1 = 2 ; let score2 = 5 ; let averageScore = (score1 + score2) / 2.0 console.log(averageScore) Block Markdown # ```javascript let score1 = 2; let score2 = 5; let averageScore = (score1 + score2) / 2.0 console.log(averageScore) ``` Script adapted from Austin Asoluka's \"How to Use Variables and Data Types in JavaScript \u2013 Explained With Code Examples\" Inline Hilighting # Inline highlighting can be added by prefixing the code snippet with three colons and the name of the supported programming language : ```:::LANGUAGE some code snippet``` or `:::LANGUAGE some code snippet` Example: The console.log() function can be used to print content to the console: console.log( \"Hello World\" ) . Inline Markdown # The `:::javascript console.log()` function can be used to print content to the console: ```:::javascript console.log(\"Hello World\")```.","title":"Javascript"},{"location":"sample-languages/javascript/#block-highlighting","text":"Language highlighting can be enabled with PyMdown and Pygments by adding a supported programming language name directly after the first ``` grouping in a Markdown code block: let score1 = 2 ; let score2 = 5 ; let averageScore = (score1 + score2) / 2.0 console.log(averageScore)","title":"Block Highlighting"},{"location":"sample-languages/javascript/#block-markdown","text":"```javascript let score1 = 2; let score2 = 5; let averageScore = (score1 + score2) / 2.0 console.log(averageScore) ``` Script adapted from Austin Asoluka's \"How to Use Variables and Data Types in JavaScript \u2013 Explained With Code Examples\"","title":"Block Markdown"},{"location":"sample-languages/javascript/#inline-hilighting","text":"Inline highlighting can be added by prefixing the code snippet with three colons and the name of the supported programming language : ```:::LANGUAGE some code snippet``` or `:::LANGUAGE some code snippet` Example: The console.log() function can be used to print content to the console: console.log( \"Hello World\" ) .","title":"Inline Hilighting"},{"location":"sample-languages/javascript/#inline-markdown","text":"The `:::javascript console.log()` function can be used to print content to the console: ```:::javascript console.log(\"Hello World\")```.","title":"Inline Markdown"},{"location":"sample-languages/python-base/","text":"Python # Block Highlighting # Language highlighting can be enabled with PyMdown and Pygments by adding a supported programming language name directly after the first ``` grouping in a Markdown code block: # calculate factorial of n def fact (n): # no work required if n == 1 or n == 0 : return 1 # minimum amount of work return n * fact(n - 1 ) if __name__ == \"__main__\" : n = 5 factorial = fact(n) print( f \"{ n }! = { factorial }\" ) Block Markdown # ```python # calculate factorial of n def fact(n): # no work required if n == 1 or n == 0: return 1 # minimum amount of work return n * fact(n - 1) if __name__==\"__main__\": n = 5 factorial = fact(n) print(f\"{n}! = {factorial}\") ``` Script adapted from Palistha Singh's \"How Does Recursion Work? Explained with Code Examples\"","title":"Python"},{"location":"sample-languages/python-base/#block-highlighting","text":"Language highlighting can be enabled with PyMdown and Pygments by adding a supported programming language name directly after the first ``` grouping in a Markdown code block: # calculate factorial of n def fact (n): # no work required if n == 1 or n == 0 : return 1 # minimum amount of work return n * fact(n - 1 ) if __name__ == \"__main__\" : n = 5 factorial = fact(n) print( f \"{ n }! = { factorial }\" )","title":"Block Highlighting"},{"location":"sample-languages/python-base/#block-markdown","text":"```python # calculate factorial of n def fact(n): # no work required if n == 1 or n == 0: return 1 # minimum amount of work return n * fact(n - 1) if __name__==\"__main__\": n = 5 factorial = fact(n) print(f\"{n}! = {factorial}\") ``` Script adapted from Palistha Singh's \"How Does Recursion Work? Explained with Code Examples\"","title":"Block Markdown"},{"location":"sample-languages/python/","text":"Python # Block Highlighting # Language highlighting can be enabled with PyMdown and Pygments by adding a supported programming language name directly after the first ``` grouping in a Markdown code block: # calculate factorial of n def fact (n): # no work required if n == 1 or n == 0 : return 1 # minimum amount of work return n * fact(n - 1 ) if __name__ == \"__main__\" : n = 5 factorial = fact(n) print( f \"{ n }! = { factorial }\" ) Block Markdown # ```python # calculate factorial of n def fact(n): # no work required if n == 1 or n == 0: return 1 # minimum amount of work return n * fact(n - 1) if __name__==\"__main__\": n = 5 factorial = fact(n) print(f\"{n}! = {factorial}\") ``` Script adapted from Palistha Singh's \"How Does Recursion Work? Explained with Code Examples\" Inline Hilighting # Inline highlighting can be added by prefixing the code snippet with three colons and the name of the supported programming language : ```:::LANGUAGE some code snippet``` or `:::LANGUAGE some code snippet` Example: The print() function can be used to print content to STDOUT: print( \"Hello World\" ) . Inline Markdown # The `:::python print()` function can be used to print content to STDOUT: ```:::python print(\"Hello World\")```.","title":"Python"},{"location":"sample-languages/python/#block-highlighting","text":"Language highlighting can be enabled with PyMdown and Pygments by adding a supported programming language name directly after the first ``` grouping in a Markdown code block: # calculate factorial of n def fact (n): # no work required if n == 1 or n == 0 : return 1 # minimum amount of work return n * fact(n - 1 ) if __name__ == \"__main__\" : n = 5 factorial = fact(n) print( f \"{ n }! = { factorial }\" )","title":"Block Highlighting"},{"location":"sample-languages/python/#block-markdown","text":"```python # calculate factorial of n def fact(n): # no work required if n == 1 or n == 0: return 1 # minimum amount of work return n * fact(n - 1) if __name__==\"__main__\": n = 5 factorial = fact(n) print(f\"{n}! = {factorial}\") ``` Script adapted from Palistha Singh's \"How Does Recursion Work? Explained with Code Examples\"","title":"Block Markdown"},{"location":"sample-languages/python/#inline-hilighting","text":"Inline highlighting can be added by prefixing the code snippet with three colons and the name of the supported programming language : ```:::LANGUAGE some code snippet``` or `:::LANGUAGE some code snippet` Example: The print() function can be used to print content to STDOUT: print( \"Hello World\" ) .","title":"Inline Hilighting"},{"location":"sample-languages/python/#inline-markdown","text":"The `:::python print()` function can be used to print content to STDOUT: ```:::python print(\"Hello World\")```.","title":"Inline Markdown"}]}